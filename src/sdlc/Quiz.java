/*
 * Frank Chen
 * Quiz JPanel
 * 30NOV19
 * Displays questions for the user to answer
 * Prompts the user if their answer is correct or incorrect
 */
package sdlc;

import java.awt.Color;
import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import javax.swing.SwingUtilities;

/**
 *
 * @author frche1699
 */
public class Quiz extends javax.swing.JPanel {

    private final JButton btns[];
    private final Question questions[];
    private Question currentQuestion;
    private int index = 0;
    private String results;

    public Quiz(Question[] questions) {
        this.questions = questions;
        initComponents();
        results = "<h1>Results:</h1>";
        btns = new JButton[4];
        // put the buttons into an array so that they could be iterated through easily
        btns[0] = btnA;
        btns[1] = btnB;
        btns[2] = btnC;
        btns[3] = btnD;
        // load the first question
        loadNext();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnA = new javax.swing.JButton();
        btnB = new javax.swing.JButton();
        btnC = new javax.swing.JButton();
        btnD = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblQuestion = new javax.swing.JLabel();
        pb = new javax.swing.JProgressBar();

        btnA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionActionPerformed(evt);
            }
        });

        btnB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionActionPerformed(evt);
            }
        });

        btnC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionActionPerformed(evt);
            }
        });

        btnD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionActionPerformed(evt);
            }
        });

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblQuestion.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblQuestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuestion.setText("Question");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnA, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(btnB, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnC, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnD, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblQuestion, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnC, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnD, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pb, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to go back? You progress will not be saved.", "Warning", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
            SDLC.setMainContentPane(new Welcome());
            // go back
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionActionPerformed
        // get source button
        JButton btn = (JButton) evt.getSource();
        // add the current question to the results;
        this.results += "<p></p><p>Question: " + currentQuestion.getQuestion() + "</p>";
        new Thread(() -> {
            String userSelection = btn.getText().replaceAll("<html>", "").replaceAll("</html>", ""); // delete all uneccessary html tages
            // display the answer feedback
            SwingUtilities.invokeLater(() -> {
                if (currentQuestion.isCorrect(userSelection)) {
                    btn.setBackground(Color.GREEN);
                    btn.setForeground(Color.GREEN);
                } else {
                    btn.setBackground(Color.RED);
                    btn.setForeground(Color.RED);
                }
                showCorrectAnswer(currentQuestion);
            });
            // add the options to the results
            addResults(userSelection);
            try {
                // disable the buttons
                for (int i = 0; i < 4; i++) {
                    btns[i].setEnabled(false);
                }
                // wait 2 seconds
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
            }
            // load the next question
            loadNext();
        }).start();
    }//GEN-LAST:event_btnOptionActionPerformed

    private void showCorrectAnswer(Question q) {
        String a = q.getCorrectOption();
        for (JButton b : btns) {
            if (a.equals(b.getText().replaceAll("<html>", "").replaceAll("</html>", ""))) {
                b.setBackground(Color.GREEN);
                b.setForeground(Color.GREEN);
            }
        }
    }

    private void addResults(String userSelection) {
        String font;
        for (int i = 0; i < 4; i++) {
            String option = currentQuestion.getOption(i);
            font = "black";
            if (option.equals(userSelection)) {
                if (!currentQuestion.isCorrect(userSelection)) {
                    font = "red";
                }
            }
            if (currentQuestion.isCorrect(option)) {
                font = "green";
            }
            this.results += "<p><font color=\"" + font + "\">" + option + "</font></p>";
        }
    }

    private void loadNext() {
        pb.setValue(index * 10);
        if (index >= questions.length) {
            // finished
            JOptionPane.showMessageDialog(null, "Finished");
            SDLC.setMainContentPane(new Results(results + "<p></p><p></p><p></p><p></p>"));
        } else {
            currentQuestion = questions[index++];
            loadQuestion(currentQuestion);
        }
    }

    private void loadQuestion(Question q) {
        String s = q.getQuestion();

        if (s.length() < 40) {
            lblQuestion.setFont(new Font("Tahoma", 0, 24));
        } else {
            lblQuestion.setFont(new Font("Tahoma", 0, 18));
        }
        this.lblQuestion.setText("<html>" + s + "</html>");
        loadOptionsRandomly(q);
        for (JButton b : btns) {
            b.setEnabled(true);
            b.setBackground(Color.WHITE);
            b.setForeground(Color.BLACK);
        }
    }

    private void loadOptionsRandomly(Question q) {
        int order[] = new int[4];
        for (int i = 0; i < 4; i++) {
            order[i] = -1;
        }
        for (int i = 0; i < 4; i++) {
            order[i] = SDLC.generateNotContaining(order, 4);
        }
        for (int i = 0; i < 4; i++) {
            btns[i].setText("<html>" + q.getOption(order[i]) + "</html>");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnA;
    private javax.swing.JButton btnB;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnC;
    private javax.swing.JButton btnD;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JProgressBar pb;
    // End of variables declaration//GEN-END:variables
}
